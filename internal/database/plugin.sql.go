// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plugin.sql

package database

import (
	"context"
)

const addPlugin = `-- name: AddPlugin :one
INSERT INTO plugins(name, description, url, origin_id, is_updated_on_server, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, datetime('now'), datetime('now'))
RETURNING id, name, description, url, origin_id, is_updated_on_server, created_at, updated_at
`

type AddPluginParams struct {
	Name              string
	Description       string
	Url               string
	OriginID          int64
	IsUpdatedOnServer int64
}

func (q *Queries) AddPlugin(ctx context.Context, arg AddPluginParams) (Plugin, error) {
	row := q.db.QueryRowContext(ctx, addPlugin,
		arg.Name,
		arg.Description,
		arg.Url,
		arg.OriginID,
		arg.IsUpdatedOnServer,
	)
	var i Plugin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.OriginID,
		&i.IsUpdatedOnServer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlugin = `-- name: DeletePlugin :one
DELETE
FROM plugins
WHERE id = ?
RETURNING id, name, description, url, origin_id, is_updated_on_server, created_at, updated_at
`

func (q *Queries) DeletePlugin(ctx context.Context, id int64) (Plugin, error) {
	row := q.db.QueryRowContext(ctx, deletePlugin, id)
	var i Plugin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.OriginID,
		&i.IsUpdatedOnServer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlugin = `-- name: GetPlugin :one
SELECT id, name, description, url, origin_id, is_updated_on_server, created_at, updated_at
FROM plugins
WHERE id = ?
`

func (q *Queries) GetPlugin(ctx context.Context, id int64) (Plugin, error) {
	row := q.db.QueryRowContext(ctx, getPlugin, id)
	var i Plugin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.OriginID,
		&i.IsUpdatedOnServer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlugins = `-- name: GetPlugins :many
SELECT id, name, description, url, origin_id, is_updated_on_server, created_at, updated_at
FROM plugins
ORDER BY is_updated_on_server, updated_at, origin_id, name
`

func (q *Queries) GetPlugins(ctx context.Context) ([]Plugin, error) {
	rows, err := q.db.QueryContext(ctx, getPlugins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plugin
	for rows.Next() {
		var i Plugin
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Url,
			&i.OriginID,
			&i.IsUpdatedOnServer,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
