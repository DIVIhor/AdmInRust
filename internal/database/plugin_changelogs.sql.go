// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plugin_changelogs.sql

package database

import (
	"context"
)

const addPluginChangelog = `-- name: AddPluginChangelog :one
INSERT INTO plugin_changelogs(plugin_id, version, changelog, update_date, created_at, updated_at)
VALUES (?, ?, ?, ?, datetime('now'), datetime('now'))
RETURNING id, plugin_id, version, changelog, update_date, created_at, updated_at
`

type AddPluginChangelogParams struct {
	PluginID   int64
	Version    string
	Changelog  string
	UpdateDate string
}

func (q *Queries) AddPluginChangelog(ctx context.Context, arg AddPluginChangelogParams) (PluginChangelog, error) {
	row := q.db.QueryRowContext(ctx, addPluginChangelog,
		arg.PluginID,
		arg.Version,
		arg.Changelog,
		arg.UpdateDate,
	)
	var i PluginChangelog
	err := row.Scan(
		&i.ID,
		&i.PluginID,
		&i.Version,
		&i.Changelog,
		&i.UpdateDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPluginChangelog = `-- name: GetPluginChangelog :many
SELECT id, plugin_id, version, changelog, update_date, created_at, updated_at
FROM plugin_changelogs
WHERE plugin_id = (
    SELECT id
    FROM plugins
    WHERE slug = ?
)
ORDER BY update_date DESC, updated_at DESC
`

func (q *Queries) GetPluginChangelog(ctx context.Context, slug string) ([]PluginChangelog, error) {
	rows, err := q.db.QueryContext(ctx, getPluginChangelog, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PluginChangelog
	for rows.Next() {
		var i PluginChangelog
		if err := rows.Scan(
			&i.ID,
			&i.PluginID,
			&i.Version,
			&i.Changelog,
			&i.UpdateDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
