// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: origins.sql

package database

import (
	"context"
)

const addOrigin = `-- name: AddOrigin :one
INSERT INTO plugin_origins(name, slug, url, path_to_plugin_list, has_api, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, datetime('now'), datetime('now'))
RETURNING id, name, slug, url, path_to_plugin_list, has_api, created_at, updated_at
`

type AddOriginParams struct {
	Name             string
	Slug             string
	Url              string
	PathToPluginList string
	HasApi           int64
}

func (q *Queries) AddOrigin(ctx context.Context, arg AddOriginParams) (PluginOrigin, error) {
	row := q.db.QueryRowContext(ctx, addOrigin,
		arg.Name,
		arg.Slug,
		arg.Url,
		arg.PathToPluginList,
		arg.HasApi,
	)
	var i PluginOrigin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Url,
		&i.PathToPluginList,
		&i.HasApi,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrigin = `-- name: DeleteOrigin :one
DELETE
FROM plugin_origins
WHERE slug = ?
RETURNING id, name, slug, url, path_to_plugin_list, has_api, created_at, updated_at
`

func (q *Queries) DeleteOrigin(ctx context.Context, slug string) (PluginOrigin, error) {
	row := q.db.QueryRowContext(ctx, deleteOrigin, slug)
	var i PluginOrigin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Url,
		&i.PathToPluginList,
		&i.HasApi,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrigin = `-- name: GetOrigin :one
SELECT id, name, slug, url, path_to_plugin_list, has_api, created_at, updated_at
FROM plugin_origins
WHERE slug = ?
`

func (q *Queries) GetOrigin(ctx context.Context, slug string) (PluginOrigin, error) {
	row := q.db.QueryRowContext(ctx, getOrigin, slug)
	var i PluginOrigin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Url,
		&i.PathToPluginList,
		&i.HasApi,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrigins = `-- name: GetOrigins :many
SELECT id, name, slug, url, path_to_plugin_list, has_api, created_at, updated_at
FROM plugin_origins
ORDER BY name
`

func (q *Queries) GetOrigins(ctx context.Context) ([]PluginOrigin, error) {
	rows, err := q.db.QueryContext(ctx, getOrigins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PluginOrigin
	for rows.Next() {
		var i PluginOrigin
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Url,
			&i.PathToPluginList,
			&i.HasApi,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrigin = `-- name: UpdateOrigin :one
UPDATE plugin_origins
SET url = ?,
    path_to_plugin_list = ?,
    has_api = ?,
    updated_at = datetime('now')
WHERE slug = ?
RETURNING id, name, slug, url, path_to_plugin_list, has_api, created_at, updated_at
`

type UpdateOriginParams struct {
	Url              string
	PathToPluginList string
	HasApi           int64
	Slug             string
}

func (q *Queries) UpdateOrigin(ctx context.Context, arg UpdateOriginParams) (PluginOrigin, error) {
	row := q.db.QueryRowContext(ctx, updateOrigin,
		arg.Url,
		arg.PathToPluginList,
		arg.HasApi,
		arg.Slug,
	)
	var i PluginOrigin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Url,
		&i.PathToPluginList,
		&i.HasApi,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
