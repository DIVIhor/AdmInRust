// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plugin_commands.sql

package database

import (
	"context"
)

const addPluginCommand = `-- name: AddPluginCommand :one
INSERT INTO plugin_commands(plugin_id, command, description, created_at, updated_at)
VALUES (?, ?, ?, datetime('now'), datetime('now'))
RETURNING id, plugin_id, command, description, created_at, updated_at
`

type AddPluginCommandParams struct {
	PluginID    int64
	Command     string
	Description string
}

func (q *Queries) AddPluginCommand(ctx context.Context, arg AddPluginCommandParams) (PluginCommand, error) {
	row := q.db.QueryRowContext(ctx, addPluginCommand, arg.PluginID, arg.Command, arg.Description)
	var i PluginCommand
	err := row.Scan(
		&i.ID,
		&i.PluginID,
		&i.Command,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePluginCommand = `-- name: DeletePluginCommand :one
DELETE
FROM plugin_commands
WHERE plugin_id = ?
RETURNING id, plugin_id, command, description, created_at, updated_at
`

func (q *Queries) DeletePluginCommand(ctx context.Context, pluginID int64) (PluginCommand, error) {
	row := q.db.QueryRowContext(ctx, deletePluginCommand, pluginID)
	var i PluginCommand
	err := row.Scan(
		&i.ID,
		&i.PluginID,
		&i.Command,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPluginCommands = `-- name: GetPluginCommands :many
SELECT id, plugin_id, command, description, created_at, updated_at
FROM plugin_commands
WHERE plugin_id = (
    SELECT id
    FROM plugins
    WHERE slug = ?
)
`

func (q *Queries) GetPluginCommands(ctx context.Context, slug string) ([]PluginCommand, error) {
	rows, err := q.db.QueryContext(ctx, getPluginCommands, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PluginCommand
	for rows.Next() {
		var i PluginCommand
		if err := rows.Scan(
			&i.ID,
			&i.PluginID,
			&i.Command,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
